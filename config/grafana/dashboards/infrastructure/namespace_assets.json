{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 3,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "PA8F69056563F1D7C"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 6,
        "x": 0,
        "y": 0
      },
      "id": 2,
      "links": [
        {
          "title": "All Assets",
          "url": "/d/${__dashboard.uid}﻿/﻿${__dashboard}﻿?${domains:queryparam}&${subs:queryparam}&${addresses:queryparam}&${geoips:queryparam}&${geolist:queryparam}&var-geocity=&var-organizations=All"
        }
      ],
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [],
          "fields": "/^Total$/",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.3.1",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "${DS_ASSET_DATABASE}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT COUNT(*) as \"Total\" FROM entities WHERE etype = 'FQDN' and content->>'name' IN (${subs})",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "${DS_ASSET_DATABASE}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT fqdn AS \"FQDN\", ip_addr AS \"IP Address\" \nFROM names_to_addrs('${subs:csv}', '${__from:date:iso}', '${__to:date:iso}')",
          "refId": "Names to Addrs",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        },
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "${DS_ASSET_DATABASE}"
          },
          "editorMode": "code",
          "format": "table",
          "hide": false,
          "rawQuery": true,
          "rawSql": "SELECT ips.content->>'address' AS \"IP Address\", nets.content->>'cidr' AS \"Netblock\", \nasns.content->>'number' AS \"ASN\", orgs.content->>'name' AS \"Organization\" \nFROM ((((((((((entities AS ips  \nINNER JOIN edges AS rels1 ON ips.entity_id = rels1.to_entity_id) \nINNER JOIN entities AS nets ON rels1.from_entity_id = nets.entity_id) \nINNER JOIN edges AS rels2 ON nets.entity_id = rels2.from_entity_id) \nINNER JOIN entities AS rdap ON rels2.to_entity_id = rdap.entity_id) \nINNER JOIN edges AS rels3 ON rdap.entity_id = rels3.from_entity_id) \nINNER JOIN entities AS contact ON rels3.to_entity_id = contact.entity_id) \nINNER JOIN edges AS rels4 ON contact.entity_id = rels4.from_entity_id) \nINNER JOIN entities AS orgs ON rels4.to_entity_id = orgs.entity_id) \nINNER JOIN edges AS rels5 ON nets.entity_id = rels5.to_entity_id) \nINNER JOIN entities AS asns ON rels5.from_entity_id = asns.entity_id) \nWHERE ips.etype = 'IPAddress' AND nets.etype = 'Netblock' AND rdap.etype = 'IPNetRecord' \nAND contact.etype = 'ContactRecord' AND orgs.etype = 'Organization' AND asns.etype = 'AutonomousSystem' \nAND rels1.etype = 'SimpleRelation' AND rels1.content->>'label' = 'contains' \nAND rels2.etype = 'SimpleRelation' AND rels2.content->>'label' = 'registration' \nAND rels3.etype = 'SimpleRelation' AND rels3.content->>'label' = 'registrant' \nAND rels4.etype = 'SimpleRelation' AND rels4.content->>'label' = 'organization' \nAND rels5.etype = 'SimpleRelation' AND rels5.content->>'label' = 'announces' \nAND rels1.updated_at >= '${__from:date:iso}' AND rels1.updated_at <= '${__to:date:iso}' \nAND rels2.updated_at >= '${__from:date:iso}' AND rels2.updated_at <= '${__to:date:iso}' \nAND rels3.updated_at >= '${__from:date:iso}' AND rels3.updated_at <= '${__to:date:iso}' \nAND rels4.updated_at >= '${__from:date:iso}' AND rels4.updated_at <= '${__to:date:iso}' \nAND rels5.updated_at >= '${__from:date:iso}' AND rels5.updated_at <= '${__to:date:iso}' \nAND orgs.content->>'name' IN (${organizations}) AND ips.content->>'address' IN (${geolist}) \nUNION \nSELECT '0' AS \"IP Address\", '-' AS \"Netblock\", '0' AS \"ASN\", '-' AS \"Organization\"",
          "refId": "Internet Numbers",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "FQDNs Discovered",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "PA8F69056563F1D7C"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "yellow",
                "value": 7
              },
              {
                "color": "red",
                "value": 14
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 5,
        "x": 6,
        "y": 0
      },
      "id": 5,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "max"
          ],
          "fields": "/^interval$/",
          "values": false
        },
        "showPercentChange": false,
        "text": {},
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.3.1",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "${DS_ASSET_DATABASE}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT extract(day from date_trunc('day', age(updated_at))) AS interval FROM entities WHERE etype = 'FQDN' AND content->>'name' IN (${subs})",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Days of Staleness",
      "type": "stat"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "P8CF24AAA6D31E196"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "links": [
            {
              "title": "Show in table",
              "url": "/d/${__dashboard.uid}﻿﻿/﻿﻿${__dashboard}﻿﻿?﻿${domains:queryparam}﻿&﻿${subs:queryparam}﻿&﻿${addresses:queryparam}&${organizations:queryparam}﻿&﻿${geoips:queryparam}﻿&var-geocity=${__data.fields.City}"
            }
          ],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "light-green",
                "value": 10
              },
              {
                "color": "super-light-green",
                "value": 20
              },
              {
                "color": "text",
                "value": 30
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 18,
        "w": 13,
        "x": 11,
        "y": 0
      },
      "id": 4,
      "options": {
        "basemap": {
          "config": {},
          "name": "Layer 0",
          "type": "default"
        },
        "controls": {
          "mouseWheelZoom": true,
          "showAttribution": false,
          "showDebug": false,
          "showMeasure": false,
          "showScale": false,
          "showZoom": true
        },
        "layers": [
          {
            "config": {
              "showLegend": false,
              "style": {
                "color": {
                  "field": "IP Count",
                  "fixed": "dark-green"
                },
                "opacity": 0.3,
                "rotation": {
                  "fixed": 0,
                  "max": 360,
                  "min": -360,
                  "mode": "mod"
                },
                "size": {
                  "field": "IP Addresses",
                  "fixed": 5,
                  "max": 10,
                  "min": 4
                },
                "symbol": {
                  "fixed": "img/icons/marker/circle.svg",
                  "mode": "fixed"
                },
                "symbolAlign": {
                  "horizontal": "center",
                  "vertical": "center"
                },
                "text": {
                  "fixed": "",
                  "mode": "field"
                },
                "textConfig": {
                  "fontSize": 12,
                  "offsetX": 0,
                  "offsetY": 0,
                  "textAlign": "center",
                  "textBaseline": "middle"
                }
              }
            },
            "name": "Assets",
            "tooltip": true,
            "type": "markers"
          }
        ],
        "tooltip": {
          "mode": "details"
        },
        "view": {
          "allLayers": true,
          "id": "fit",
          "lat": 0,
          "lon": 0,
          "padding": 8,
          "zoom": 15
        }
      },
      "pluginVersion": "11.3.1",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "P8CF24AAA6D31E196"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT ip_addr AS \"IP Address\", city AS \"City\", latitude AS \"Latitude\", longitude AS \"Longitude\" FROM batch_ip_geo('${geoips:csv}')",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "",
      "transformations": [
        {
          "id": "groupBy",
          "options": {
            "fields": {
              "City": {
                "aggregations": [],
                "operation": "groupby"
              },
              "IP Address": {
                "aggregations": [
                  "uniqueValues",
                  "distinctCount"
                ],
                "operation": "aggregate"
              },
              "Latitude": {
                "aggregations": [],
                "operation": "groupby"
              },
              "Longitude": {
                "aggregations": [],
                "operation": "groupby"
              }
            }
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {},
            "renameByName": {
              "IP Address (distinctCount)": "IP Addresses",
              "IP Address (uniqueValues)": "IP List"
            }
          }
        },
        {
          "id": "filterFieldsByName",
          "options": {
            "include": {
              "names": [
                "City",
                "Latitude",
                "Longitude",
                "IP Addresses"
              ]
            }
          }
        }
      ],
      "type": "geomap"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "PA8F69056563F1D7C"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "blue",
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "decimals": 2,
          "links": [
            {
              "title": "Select Slice",
              "url": "/d/${__dashboard.uid}﻿﻿/﻿﻿${__dashboard}﻿﻿?﻿${domains:queryparam}﻿&﻿${subs:queryparam}﻿&﻿${addresses:queryparam}﻿&﻿${geoips:queryparam}&${geolist:queryparam}﻿﻿&﻿var-organizations=${__data.fields.Organization}&var-geocity="
            }
          ],
          "mappings": []
        },
        "overrides": [
          {
            "__systemRef": "hideSeriesFrom",
            "matcher": {
              "id": "byNames",
              "options": {
                "mode": "exclude",
                "names": [
                  "IP Address (distinctCount)"
                ],
                "prefix": "All except:",
                "readOnly": true
              }
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": false,
                  "tooltip": false,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 13,
        "w": 11,
        "x": 0,
        "y": 5
      },
      "id": 1,
      "links": [
        {
          "title": "All Organizations",
          "url": "/d/${__dashboard.uid}﻿﻿/﻿﻿${__dashboard}﻿﻿?﻿${domains:queryparam}﻿&﻿${subs:queryparam}﻿&﻿${addresses:queryparam}&﻿${geoips:queryparam}&${geolist:queryparam}﻿&var-geocity=&var-organizations=All"
        }
      ],
      "options": {
        "displayLabels": [
          "name"
        ],
        "legend": {
          "displayMode": "list",
          "placement": "right",
          "showLegend": true,
          "values": [
            "percent"
          ]
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "sum"
          ],
          "fields": "/^IP Address \\(distinctCount\\)$/",
          "limit": 0,
          "values": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.3.1",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "${DS_ASSET_DATABASE}"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT ips.content->>'address' AS \"IP Address\", string_agg(orgs.content->>'name', ' - ' ORDER BY orgs.content->>'name') AS \"Organization\" \nFROM ((((((((entities AS ips \nINNER JOIN edges AS rels1 ON ips.entity_id = rels1.to_entity_id) \nINNER JOIN entities AS nets ON rels1.from_entity_id = nets.entity_id) \nINNER JOIN edges AS rels2 ON nets.entity_id = rels2.from_entity_id) \nINNER JOIN entities AS rdap ON rels2.to_entity_id = rdap.entity_id) \nINNER JOIN edges AS rels3 ON rdap.entity_id = rels3.from_entity_id) \nINNER JOIN entities AS contact ON rels3.to_entity_id = contact.entity_id) \nINNER JOIN edges AS rels4 ON rels4.from_entity_id = contact.entity_id) \nINNER JOIN entities AS orgs ON rels4.to_entity_id = orgs.entity_id) \nWHERE ips.etype = 'IPAddress' AND nets.etype = 'Netblock' AND rdap.etype = 'IPNetRecord' \nAND contact.etype = 'ContactRecord' AND orgs.etype = 'Organization' \nAND rels1.etype = 'SimpleRelation' AND rels1.content->>'label' = 'contains' \nAND rels2.etype = 'SimpleRelation' AND rels2.content->>'label' = 'registration' \nAND rels3.etype = 'SimpleRelation' AND rels3.content->>'label' = 'registrant' \nAND rels4.etype = 'SimpleRelation' AND rels4.content->>'label' = 'organization' \nAND ips.content->>'address' IN (${addresses}) \nAND rels1.updated_at >= '${__from:date:iso}' AND rels1.updated_at <= '${__to:date:iso}' \nAND rels2.updated_at >= '${__from:date:iso}' AND rels2.updated_at <= '${__to:date:iso}' \nAND rels3.updated_at >= '${__from:date:iso}' AND rels3.updated_at <= '${__to:date:iso}' \nAND rels4.updated_at >= '${__from:date:iso}' AND rels4.updated_at <= '${__to:date:iso}' \nGROUP BY ips.content->>'address'",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Hosting Organizations",
      "transformations": [
        {
          "id": "groupBy",
          "options": {
            "fields": {
              "IP Address": {
                "aggregations": [
                  "distinctCount"
                ],
                "operation": "aggregate"
              },
              "Organization": {
                "aggregations": [],
                "operation": "groupby"
              }
            }
          }
        }
      ],
      "type": "piechart"
    },
    {
      "datasource": {
        "type": "datasource",
        "uid": "-- Dashboard --"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "text",
            "mode": "fixed"
          },
          "custom": {
            "align": "center",
            "cellOptions": {
              "type": "color-text"
            },
            "filterable": true,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "FQDN"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 534
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Netblock"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 206
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "ASN"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 148
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 26,
        "w": 24,
        "x": 0,
        "y": 18
      },
      "id": 3,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": true,
          "enablePagination": true,
          "fields": "",
          "reducer": [
            "count"
          ],
          "show": true
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": false,
            "displayName": "FQDN"
          }
        ]
      },
      "pluginVersion": "11.3.1",
      "targets": [
        {
          "datasource": {
            "type": "datasource",
            "uid": "-- Dashboard --"
          },
          "panelId": 2,
          "refId": "A"
        }
      ],
      "title": "",
      "transformations": [
        {
          "id": "joinByField",
          "options": {
            "byField": "IP Address",
            "mode": "inner"
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {
              "ASN": 3,
              "FQDN": 0,
              "IP Address": 1,
              "Netblock": 2,
              "Organization": 4
            },
            "renameByName": {}
          }
        }
      ],
      "type": "table"
    },
    {
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 2,
        "w": 6,
        "x": 18,
        "y": 44
      },
      "id": 6,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "The OWASP Amass Project uses the [IP2Location LITE](https://lite.ip2location.com) database for IP geolocation.",
        "mode": "markdown"
      },
      "pluginVersion": "11.3.1",
      "title": "",
      "type": "text"
    }
  ],
  "preload": false,
  "refresh": "1m",
  "schemaVersion": 40,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "text": [
            "mvcc.edu"
          ],
          "value": [
            "mvcc.edu"
          ]
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "PA8F69056563F1D7C"
        },
        "definition": "SELECT DISTINCT substring(zone.name from '(([a-zA-Z0-9]{1}|[_a-zA-Z0-9]{1}[_a-zA-Z0-9-]{0,61}[a-zA-Z0-9]{1})[.]{1}[a-zA-Z]{2,61}$)') AS name FROM ((SELECT entity_id, content->>'name' as name FROM entities WHERE etype = 'FQDN' \nAND entity_id IN (SELECT from_entity_id FROM edges WHERE etype = 'SimpleRelation' AND content->>'label' = 'node')) as zone \nINNER JOIN edges ON zone.entity_id = edges.from_entity_id) \nWHERE edges.etype = 'PrefDNSRelation' AND edges.content->>'label' = 'dns_record' AND edges.content->'header'->'rr_type' = '15'",
        "description": "Known registered domain names",
        "includeAll": false,
        "label": "Namespaces",
        "multi": true,
        "name": "domains",
        "options": [],
        "query": "SELECT DISTINCT substring(zone.name from '(([a-zA-Z0-9]{1}|[_a-zA-Z0-9]{1}[_a-zA-Z0-9-]{0,61}[a-zA-Z0-9]{1})[.]{1}[a-zA-Z]{2,61}$)') AS name FROM ((SELECT entity_id, content->>'name' as name FROM entities WHERE etype = 'FQDN' \nAND entity_id IN (SELECT from_entity_id FROM edges WHERE etype = 'SimpleRelation' AND content->>'label' = 'node')) as zone \nINNER JOIN edges ON zone.entity_id = edges.from_entity_id) \nWHERE edges.etype = 'PrefDNSRelation' AND edges.content->>'label' = 'dns_record' AND edges.content->'header'->'rr_type' = '15'",
        "refresh": 2,
        "regex": "",
        "sort": 1,
        "type": "query"
      },
      {
        "current": {
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "PA8F69056563F1D7C"
        },
        "definition": "SELECT fqdns.content->>'name' AS \"FQDN\" FROM ((entities AS fqdns \nINNER JOIN edges ON fqdns.entity_id = edges.from_entity_id) \nINNER JOIN entities AS target ON edges.to_entity_id = target.entity_id) \nWHERE fqdns.etype = 'FQDN' AND target.etype IN ('FQDN', 'IPAddress')\nAND edges.etype = 'BasicDNSRelation' AND edges.content->>'label' = 'dns_record' AND edges.content->'header'->'rr_type' IN ('1', '28', '5') \nAND fqdns.content->>'name' SIMILAR TO '%${domains:regex}' \nAND edges.updated_at > '${__from:date:iso}' AND edges.updated_at < '${__to:date:iso}' \nUNION \nSELECT '-' AS \"FQDN\"",
        "description": "Subdomain names from the already selected domains variable",
        "hide": 2,
        "includeAll": true,
        "multi": true,
        "name": "subs",
        "options": [],
        "query": "SELECT fqdns.content->>'name' AS \"FQDN\" FROM ((entities AS fqdns \nINNER JOIN edges ON fqdns.entity_id = edges.from_entity_id) \nINNER JOIN entities AS target ON edges.to_entity_id = target.entity_id) \nWHERE fqdns.etype = 'FQDN' AND target.etype IN ('FQDN', 'IPAddress')\nAND edges.etype = 'BasicDNSRelation' AND edges.content->>'label' = 'dns_record' AND edges.content->'header'->'rr_type' IN ('1', '28', '5') \nAND fqdns.content->>'name' SIMILAR TO '%${domains:regex}' \nAND edges.updated_at > '${__from:date:iso}' AND edges.updated_at < '${__to:date:iso}' \nUNION \nSELECT '-' AS \"FQDN\"",
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "PA8F69056563F1D7C"
        },
        "definition": "SELECT DISTINCT ip_addr FROM names_to_addrs('${subs:csv}', '${__from:date:iso}', '${__to:date:iso}') \nUNION \nSELECT '0.0.0.0' AS ip_addr",
        "description": "IP addresses for the subdomains in scope",
        "hide": 2,
        "includeAll": true,
        "multi": true,
        "name": "addresses",
        "options": [],
        "query": "SELECT DISTINCT ip_addr FROM names_to_addrs('${subs:csv}', '${__from:date:iso}', '${__to:date:iso}') \nUNION \nSELECT '0.0.0.0' AS ip_addr",
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "PA8F69056563F1D7C"
        },
        "definition": "SELECT string_agg(orgs.content->>'name', ' - ' ORDER BY orgs.content->>'name') AS \"Organization\" \nFROM ((((((((entities AS ips  \nINNER JOIN edges AS rels1 ON ips.entity_id = rels1.to_entity_id) \nINNER JOIN entities AS nets ON rels1.from_entity_id = nets.entity_id) \nINNER JOIN edges AS rels2 ON nets.entity_id = rels2.from_entity_id) \nINNER JOIN entities AS rdap ON rels2.to_entity_id = rdap.entity_id) \nINNER JOIN edges AS rels3 ON rdap.entity_id = rels3.from_entity_id) \nINNER JOIN entities AS contact ON rels3.to_entity_id = contact.entity_id) \nINNER JOIN edges AS rels4 ON contact.entity_id = rels4.from_entity_id) \nINNER JOIN entities AS orgs ON rels4.to_entity_id = orgs.entity_id) \nWHERE rels1.etype = 'SimpleRelation' AND rels1.content->>'label' = 'contains' AND ips.etype = 'IPAddress' \nAND nets.etype = 'Netblock' AND rels2.etype = 'SimpleRelation' AND rels2.content->>'label' = 'registration' AND rels3.etype = 'SimpleRelation' AND rels3.content->>'label' = 'registrant' AND rels4.etype = 'SimpleRelation' AND rels4.content->>'label' = 'organization' \nAND rdap.etype = 'IPNetRecord' AND contact.etype = 'ContactRecord' AND orgs.etype = 'Organization'\nAND rels1.updated_at >= '${__from:date:iso}' AND rels1.updated_at <= '${__to:date:iso}' \nAND rels2.updated_at >= '${__from:date:iso}' AND rels2.updated_at <= '${__to:date:iso}' \nAND rels3.updated_at >= '${__from:date:iso}' AND rels3.updated_at <= '${__to:date:iso}' \nAND rels4.updated_at >= '${__from:date:iso}' AND rels4.updated_at <= '${__to:date:iso}' \nAND ips.content->>'address' IN (${addresses}) \nGROUP BY ips.content->>'address' \nUNION \nSELECT '-' AS \"Organization\"",
        "hide": 2,
        "includeAll": true,
        "multi": true,
        "name": "organizations",
        "options": [],
        "query": "SELECT string_agg(orgs.content->>'name', ' - ' ORDER BY orgs.content->>'name') AS \"Organization\" \nFROM ((((((((entities AS ips  \nINNER JOIN edges AS rels1 ON ips.entity_id = rels1.to_entity_id) \nINNER JOIN entities AS nets ON rels1.from_entity_id = nets.entity_id) \nINNER JOIN edges AS rels2 ON nets.entity_id = rels2.from_entity_id) \nINNER JOIN entities AS rdap ON rels2.to_entity_id = rdap.entity_id) \nINNER JOIN edges AS rels3 ON rdap.entity_id = rels3.from_entity_id) \nINNER JOIN entities AS contact ON rels3.to_entity_id = contact.entity_id) \nINNER JOIN edges AS rels4 ON contact.entity_id = rels4.from_entity_id) \nINNER JOIN entities AS orgs ON rels4.to_entity_id = orgs.entity_id) \nWHERE rels1.etype = 'SimpleRelation' AND rels1.content->>'label' = 'contains' AND ips.etype = 'IPAddress' \nAND nets.etype = 'Netblock' AND rels2.etype = 'SimpleRelation' AND rels2.content->>'label' = 'registration' AND rels3.etype = 'SimpleRelation' AND rels3.content->>'label' = 'registrant' AND rels4.etype = 'SimpleRelation' AND rels4.content->>'label' = 'organization' \nAND rdap.etype = 'IPNetRecord' AND contact.etype = 'ContactRecord' AND orgs.etype = 'Organization'\nAND rels1.updated_at >= '${__from:date:iso}' AND rels1.updated_at <= '${__to:date:iso}' \nAND rels2.updated_at >= '${__from:date:iso}' AND rels2.updated_at <= '${__to:date:iso}' \nAND rels3.updated_at >= '${__from:date:iso}' AND rels3.updated_at <= '${__to:date:iso}' \nAND rels4.updated_at >= '${__from:date:iso}' AND rels4.updated_at <= '${__to:date:iso}' \nAND ips.content->>'address' IN (${addresses}) \nGROUP BY ips.content->>'address' \nUNION \nSELECT '-' AS \"Organization\"",
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "PA8F69056563F1D7C"
        },
        "definition": "SELECT ips.content->>'address' AS \"IP Address\" \nFROM ((((((((entities AS ips  \nINNER JOIN edges AS rels1 ON ips.entity_id = rels1.to_entity_id) \nINNER JOIN entities AS nets ON rels1.from_entity_id = nets.entity_id) \nINNER JOIN edges AS rels2 ON nets.entity_id = rels2.from_entity_id) \nINNER JOIN entities AS rdap ON rels2.to_entity_id = rdap.entity_id) \nINNER JOIN edges AS rels3 ON rdap.entity_id = rels3.from_entity_id) \nINNER JOIN entities AS contact ON rels3.to_entity_id = contact.entity_id) \nINNER JOIN edges AS rels4 ON contact.entity_id = rels4.from_entity_id) \nINNER JOIN entities AS orgs ON rels4.to_entity_id = orgs.entity_id) \nWHERE ips.etype = 'IPAddress' AND nets.etype = 'Netblock' AND rdap.etype = 'IPNetRecord' \nAND contact.etype = 'ContactRecord' AND orgs.etype = 'Organization'\nAND rels1.etype = 'SimpleRelation' AND rels1.content->>'label' = 'contains' AND rels2.etype = 'SimpleRelation' AND rels2.content->>'label' = 'registration' AND rels3.etype = 'SimpleRelation' AND rels3.content->>'label' = 'registrant' \nAND rels4.etype = 'SimpleRelation' AND rels4.content->>'label' = 'organization'\nAND rels1.updated_at >= '${__from:date:iso}' AND rels1.updated_at <= '${__to:date:iso}' \nAND rels2.updated_at >= '${__from:date:iso}' AND rels2.updated_at <= '${__to:date:iso}' \nAND rels3.updated_at >= '${__from:date:iso}' AND rels3.updated_at <= '${__to:date:iso}'  \nAND rels4.updated_at >= '${__from:date:iso}' AND rels4.updated_at <= '${__to:date:iso}' \nAND ips.content->>'address' IN (${addresses}) \nAND orgs.content->>'name' IN (${organizations}) \nUNION \nSELECT '0.0.0.0' AS \"IP Address\"",
        "hide": 2,
        "includeAll": true,
        "multi": true,
        "name": "geoips",
        "options": [],
        "query": "SELECT ips.content->>'address' AS \"IP Address\" \nFROM ((((((((entities AS ips  \nINNER JOIN edges AS rels1 ON ips.entity_id = rels1.to_entity_id) \nINNER JOIN entities AS nets ON rels1.from_entity_id = nets.entity_id) \nINNER JOIN edges AS rels2 ON nets.entity_id = rels2.from_entity_id) \nINNER JOIN entities AS rdap ON rels2.to_entity_id = rdap.entity_id) \nINNER JOIN edges AS rels3 ON rdap.entity_id = rels3.from_entity_id) \nINNER JOIN entities AS contact ON rels3.to_entity_id = contact.entity_id) \nINNER JOIN edges AS rels4 ON contact.entity_id = rels4.from_entity_id) \nINNER JOIN entities AS orgs ON rels4.to_entity_id = orgs.entity_id) \nWHERE ips.etype = 'IPAddress' AND nets.etype = 'Netblock' AND rdap.etype = 'IPNetRecord' \nAND contact.etype = 'ContactRecord' AND orgs.etype = 'Organization'\nAND rels1.etype = 'SimpleRelation' AND rels1.content->>'label' = 'contains' AND rels2.etype = 'SimpleRelation' AND rels2.content->>'label' = 'registration' AND rels3.etype = 'SimpleRelation' AND rels3.content->>'label' = 'registrant' \nAND rels4.etype = 'SimpleRelation' AND rels4.content->>'label' = 'organization'\nAND rels1.updated_at >= '${__from:date:iso}' AND rels1.updated_at <= '${__to:date:iso}' \nAND rels2.updated_at >= '${__from:date:iso}' AND rels2.updated_at <= '${__to:date:iso}' \nAND rels3.updated_at >= '${__from:date:iso}' AND rels3.updated_at <= '${__to:date:iso}'  \nAND rels4.updated_at >= '${__from:date:iso}' AND rels4.updated_at <= '${__to:date:iso}' \nAND ips.content->>'address' IN (${addresses}) \nAND orgs.content->>'name' IN (${organizations}) \nUNION \nSELECT '0.0.0.0' AS \"IP Address\"",
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "current": {
          "text": "Tokyo",
          "value": "Tokyo"
        },
        "hide": 2,
        "name": "geocity",
        "options": [],
        "query": "",
        "type": "custom"
      },
      {
        "current": {
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "P8CF24AAA6D31E196"
        },
        "definition": "SELECT * FROM unnest(string_to_array('${addresses:csv}', ',')) WHERE '${geocity:raw}' = '' UNION SELECT ip_addr FROM batch_ip_geo('${addresses:csv}') WHERE city = '${geocity:raw}'",
        "hide": 2,
        "includeAll": true,
        "multi": true,
        "name": "geolist",
        "options": [],
        "query": "SELECT * FROM unnest(string_to_array('${addresses:csv}', ',')) WHERE '${geocity:raw}' = '' UNION SELECT ip_addr FROM batch_ip_geo('${addresses:csv}') WHERE city = '${geocity:raw}'",
        "refresh": 1,
        "regex": "",
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-7d",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Assets in Registered Namespaces",
  "uid": "ee5dtxeegr668b",
  "version": 7,
  "weekStart": ""
}